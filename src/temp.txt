import { useState, useEffect } from "react";
import supabase from "./supabase-clientconfig";

function Generate({ selectedCategories, totalBudget, timeframe, goBack }) {
  const [shoppingList, setShoppingList] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [overallTotal, setOverallTotal] = useState(0);

  // Calculate reasonable quantity limits based on priority and timeframe
  const calculateReasonableQuantity = (priority, timeframe) => {
    // Base consumption units per priority level (higher priority = more frequent consumption)
    const baseUnits = Math.ceil(priority / 2); // Priority 10 = 5 units base, Priority 1 = 1 unit base
    
    // Weekly consumption estimate
    const weeklyConsumption = baseUnits * 2; // Multiply by 2 to get reasonable weekly amounts
    
    // Calculate based on timeframe
    return timeframe === "weekly" 
      ? weeklyConsumption 
      : weeklyConsumption * 4; // Monthly consumption
  };

  useEffect(() => {
    const fetchAndGenerateList = async () => {
      setLoading(true);
      setError(null);

      try {
        // Input validation
        if (!Array.isArray(selectedCategories) || selectedCategories.length === 0) {
          throw new Error("Please select at least one category");
        }
        if (typeof totalBudget !== 'number' || totalBudget <= 0) {
          throw new Error("Budget must be a positive number");
        }
        if (!['weekly', 'monthly'].includes(timeframe)) {
          throw new Error("Invalid timeframe selected");
        }

        // Fetch products with error handling
        const { data: products, error: fetchError } = await supabase
          .from("products")
          .select("ProductName, Price, Category, Priority")
          .in("Category", selectedCategories)
          .gt("Price", 0) // Ensure only positive prices
          .gt("Priority", 0); // Ensure only positive priorities

        if (fetchError) throw fetchError;
        if (!products || products.length === 0) {
          throw new Error("No products found for selected categories");
        }

        // Calculate total priority score for budget allocation
        const categoryPriorities = {};
        const totalPriorityScore = products.reduce((total, product) => {
          if (!categoryPriorities[product.Category]) {
            categoryPriorities[product.Category] = 0;
          }
          categoryPriorities[product.Category] += product.Priority;
          return total + product.Priority;
        }, 0);

        // Generate shopping list with consumption-based limits
        const list = [];
        let overallSum = 0;

        for (const category of selectedCategories) {
          const categoryProducts = products
            .filter(product => product.Category === category)
            .sort((a, b) => b.Priority - a.Priority);

          if (categoryProducts.length > 0) {
            let categoryBudget = (categoryPriorities[category] / totalPriorityScore) * totalBudget;
            let remainingBudget = categoryBudget;

            for (const product of categoryProducts) {
              if (product.Price <= remainingBudget) {
                // Calculate maximum quantity based on budget
                const maxBudgetQuantity = Math.floor(remainingBudget / product.Price);
                
                // Calculate reasonable quantity based on priority and timeframe
                const reasonableQuantity = calculateReasonableQuantity(product.Priority, timeframe);
                
                // Use the smaller of the two quantities
                const quantity = Math.min(maxBudgetQuantity, reasonableQuantity);

                if (quantity > 0) {
                  const totalPrice = quantity * product.Price;
                  
                  list.push({
                    productName: product.ProductName,
                    category: product.Category,
                    unitPrice: product.Price.toFixed(2),
                    quantity,
                    totalPrice: totalPrice.toFixed(2),
                  });

                  overallSum += totalPrice;
                  remainingBudget -= totalPrice;
                }
              }
            }

            // Fallback: Add highest priority item if no items were added for category
            if (!list.some(item => item.category === category)) {
              const highestPriorityProduct = categoryProducts[0];
              const quantity = 1;
              
              list.push({
                productName: highestPriorityProduct.ProductName,
                category: highestPriorityProduct.Category,
                unitPrice: highestPriorityProduct.Price.toFixed(2),
                quantity,
                totalPrice: (highestPriorityProduct.Price * quantity).toFixed(2),
              });
              
              overallSum += highestPriorityProduct.Price;
            }
          }
        }

        setShoppingList(list);
        setOverallTotal(overallSum.toFixed(2));
      } catch (err) {
        console.error("Error generating shopping list:", err);
        setError(err.message || "Failed to generate shopping list. Please try again.");
      } finally {
        setLoading(false);
      }
    };

    if (selectedCategories.length > 0 && totalBudget > 0 && timeframe) {
      fetchAndGenerateList();
    }
  }, [selectedCategories, totalBudget, timeframe]);

  return (
    <div className="generate-container">
      <h1>Generated Shopping List</h1>
      {loading && <p>Loading...</p>}
      {error && <p className="error">{error}</p>}
      {!loading && !error && shoppingList.length === 0 && <p>No items found within the budget.</p>}
      {!loading && !error && shoppingList.length > 0 && (
        <>
          <table className="shopping-list-table">
            <thead>
              <tr>
                <th>Category</th>
                <th>Product Name</th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              {shoppingList.map((item, index) => (
                <tr key={`${item.category}-${item.productName}-${index}`}>
                  <td>{item.category}</td>
                  <td>{item.productName}</td>
                  <td>₱{item.unitPrice}</td>
                  <td>{item.quantity}</td>
                  <td>₱{item.totalPrice}</td>
                </tr>
              ))}
            </tbody>
          </table>
          <h3>Overall Total: ₱{overallTotal}</h3>
        </>
      )}
      <button onClick={goBack} className="back-button">
        Back
      </button>
    </div>
  );
}

export default Generate;


